"""
Servi칞o de monitoramento da loja
"""
import logging
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from sqlalchemy.orm import Session
from sqlalchemy import func
from pathlib import Path
import telegram
from dotenv import load_dotenv

from ..config import setup_logger
from ..api.telegram import TelegramAPI
from ...database.models import Produto, Pedido, PedidoItem, StatusPedido, StatusProduto
from ...database.repository import ProdutoRepository, PedidoRepository

# Carregar vari치veis de ambiente
load_dotenv()

# Configura칞칚o de logger
logger = setup_logger(__name__)

class MonitoramentoService:
    """
    Servi칞o respons치vel pelo monitoramento de m칠tricas da loja e gera칞칚o de relat칩rios
    """
    
    def __init__(self, db: Session):
        """
        Inicializa o servi칞o de monitoramento com uma sess칚o de banco de dados
        
        Args:
            db: Sess칚o do banco de dados
        """
        self.db = db
        self.produto_repo = ProdutoRepository(db)
        self.pedido_repo = PedidoRepository(db)
        self.telegram = TelegramAPI()
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.chat_id = os.getenv("TELEGRAM_CHAT_ID")
    
    def gerar_relatorio_diario(self) -> Dict[str, Any]:
        """
        Gera um relat칩rio di치rio com m칠tricas de desempenho da loja
        
        Returns:
            Um dicion치rio contendo o relat칩rio di치rio
        """
        try:
            logger.info("Iniciando gera칞칚o de relat칩rio di치rio")
            
            # Data atual e ontem para compara칞칫es
            hoje = datetime.now()
            ontem = hoje - timedelta(days=1)
            
            # TODO: Obter dados reais do banco de dados
            # Dados s칚o simulados para este exemplo
            relatorio = {
                "data_geracao": hoje.isoformat(),
                "periodo": {
                    "inicio": ontem.isoformat(),
                    "fim": hoje.isoformat()
                },
                "vendas": {
                    "total": 1250.00,
                    "quantidade": 5,
                    "ticket_medio": 250.00,
                    "variacao_dia_anterior": 15.0  # em porcentagem
                },
                "produtos": {
                    "mais_vendidos": [
                        {"id": "P001", "nome": "Produto A", "quantidade": 3, "valor_total": 750.00},
                        {"id": "P002", "nome": "Produto B", "quantidade": 2, "valor_total": 500.00}
                    ],
                    "sem_estoque": 2,
                    "estoque_baixo": 5
                },
                "pedidos": {
                    "novos": 6,
                    "em_processamento": 4,
                    "enviados": 3,
                    "entregues": 5,
                    "cancelados": 1,
                    "pendentes_ha_mais_de_24h": 2
                },
                "financeiro": {
                    "receita_bruta": 1250.00,
                    "taxas_ml": 125.00,
                    "custos_produtos": 625.00,
                    "custos_frete": 75.00,
                    "lucro_liquido": 425.00,
                    "margem_lucro": 34.0  # em porcentagem
                }
            }
            
            logger.info("Relat칩rio di치rio gerado com sucesso")
            return relatorio
            
        except Exception as e:
            logger.exception("Erro ao gerar relat칩rio di치rio")
            return {"erro": str(e)}
    
    def monitorar_pedidos_pendentes(self) -> Dict[str, Any]:
        """
        Monitora pedidos pendentes e identifica aqueles com mais de 24h
        
        Returns:
            Dicion치rio com o status do monitoramento e alertas
        """
        try:
            logger.info("Verificando pedidos pendentes")
            
            # TODO: Implementar consulta real ao banco de dados
            # Simula칞칚o de pedidos pendentes
            pedidos_pendentes = [
                {"id": "O001", "data_criacao": (datetime.now() - timedelta(hours=26)).isoformat(), "valor": 250.00},
                {"id": "O002", "data_criacao": (datetime.now() - timedelta(hours=25)).isoformat(), "valor": 320.00},
                {"id": "O003", "data_criacao": (datetime.now() - timedelta(hours=6)).isoformat(), "valor": 180.00}
            ]
            
            # Filtra pedidos com mais de 24h
            alertas = [p for p in pedidos_pendentes if 
                      (datetime.now() - datetime.fromisoformat(p["data_criacao"])).total_seconds() >= 24*3600]
            
            resultado = {
                "data_verificacao": datetime.now().isoformat(),
                "total_pendentes": len(pedidos_pendentes),
                "pendentes_24h": len(alertas),
                "alertas": alertas
            }
            
            # Se houver alertas, tenta enviar notifica칞칚o
            if alertas and self.bot_token and self.chat_id:
                self._enviar_alerta_telegram(f"丘멆잺 ALERTA: {len(alertas)} pedidos pendentes h치 mais de 24h!")
            
            logger.info(f"Verifica칞칚o conclu칤da. {len(alertas)} pedidos pendentes h치 mais de 24h")
            return resultado
            
        except Exception as e:
            logger.exception("Erro ao monitorar pedidos pendentes")
            return {"erro": str(e)}
    
    def salvar_relatorio_json(self, relatorio: Dict[str, Any], caminho: str) -> bool:
        """
        Salva o relat칩rio em um arquivo JSON
        
        Args:
            relatorio: Dicion치rio contendo o relat칩rio
            caminho: Caminho onde o arquivo ser치 salvo
            
        Returns:
            True se o arquivo foi salvo com sucesso, False caso contr치rio
        """
        try:
            # Cria o diret칩rio se n칚o existir
            diretorio = os.path.dirname(caminho)
            if diretorio and not os.path.exists(diretorio):
                os.makedirs(diretorio)
                
            # Salva o arquivo
            with open(caminho, 'w', encoding='utf-8') as f:
                json.dump(relatorio, f, indent=4, ensure_ascii=False)
                
            logger.info(f"Relat칩rio salvo com sucesso em {caminho}")
            return True
            
        except Exception as e:
            logger.exception(f"Erro ao salvar relat칩rio em {caminho}")
            return False
    
    def enviar_relatorio_telegram(self) -> bool:
        """
        Envia o relat칩rio di치rio via Telegram
        
        Returns:
            True se o relat칩rio foi enviado com sucesso, False caso contr치rio
        """
        try:
            if not self.bot_token or not self.chat_id:
                logger.error("Token do bot ou ID do chat n칚o configurados")
                return False
                
            # Gera o relat칩rio
            relatorio = self.gerar_relatorio_diario()
            
            # Verifica se houve erro na gera칞칚o
            if "erro" in relatorio:
                logger.error(f"Erro ao gerar relat칩rio para envio: {relatorio['erro']}")
                return False
            
            # Formata a mensagem
            mensagem = self._formatar_mensagem_telegram(relatorio)
            
            # Envia a mensagem
            resultado = self._enviar_mensagem_telegram(mensagem)
            
            return resultado
            
        except Exception as e:
            logger.exception("Erro ao enviar relat칩rio via Telegram")
            return False
    
    def _formatar_mensagem_telegram(self, relatorio: Dict[str, Any]) -> str:
        """
        Formata o relat칩rio para envio via Telegram
        
        Args:
            relatorio: Dicion치rio contendo o relat칩rio
            
        Returns:
            Texto formatado para envio
        """
        try:
            data = datetime.fromisoformat(relatorio["data_geracao"]).strftime("%d/%m/%Y %H:%M")
            
            mensagem = f"游늵 *RELAT칍RIO DI츼RIO - {data}*\n\n"
            
            # Se칞칚o de vendas
            vendas = relatorio["vendas"]
            mensagem += f"*游눯 VENDAS*\n"
            mensagem += f"Total: R$ {vendas['total']:.2f}\n"
            mensagem += f"Quantidade: {vendas['quantidade']}\n"
            mensagem += f"Ticket m칠dio: R$ {vendas['ticket_medio']:.2f}\n"
            mensagem += f"Varia칞칚o: {'+' if vendas['variacao_dia_anterior'] >= 0 else ''}{vendas['variacao_dia_anterior']:.1f}%\n\n"
            
            # Se칞칚o de pedidos
            pedidos = relatorio["pedidos"]
            mensagem += f"*游닍 PEDIDOS*\n"
            mensagem += f"Novos: {pedidos['novos']}\n"
            mensagem += f"Em processamento: {pedidos['em_processamento']}\n"
            mensagem += f"Enviados: {pedidos['enviados']}\n"
            mensagem += f"Entregues: {pedidos['entregues']}\n"
            
            # Alertas se houver pedidos pendentes h치 mais de 24h
            if pedidos["pendentes_ha_mais_de_24h"] > 0:
                mensagem += f"丘멆잺 *Pendentes > 24h: {pedidos['pendentes_ha_mais_de_24h']}*\n\n"
            else:
                mensagem += "\n"
            
            # Se칞칚o financeira
            financeiro = relatorio["financeiro"]
            mensagem += f"*游눳 FINANCEIRO*\n"
            mensagem += f"Receita bruta: R$ {financeiro['receita_bruta']:.2f}\n"
            mensagem += f"Custos: R$ {financeiro['custos_produtos'] + financeiro['custos_frete'] + financeiro['taxas_ml']:.2f}\n"
            mensagem += f"Lucro l칤quido: R$ {financeiro['lucro_liquido']:.2f}\n"
            mensagem += f"Margem: {financeiro['margem_lucro']:.1f}%\n\n"
            
            # Alerta de estoque
            produtos = relatorio["produtos"]
            if produtos["sem_estoque"] > 0 or produtos["estoque_baixo"] > 0:
                mensagem += f"*丘멆잺 ALERTAS DE ESTOQUE*\n"
                if produtos["sem_estoque"] > 0:
                    mensagem += f"Sem estoque: {produtos['sem_estoque']}\n"
                if produtos["estoque_baixo"] > 0:
                    mensagem += f"Estoque baixo: {produtos['estoque_baixo']}\n"
            
            return mensagem
            
        except Exception as e:
            logger.exception("Erro ao formatar mensagem para Telegram")
            return f"Erro ao formatar relat칩rio: {str(e)}"
    
    def _enviar_mensagem_telegram(self, mensagem: str) -> bool:
        """
        Envia uma mensagem via Telegram
        
        Args:
            mensagem: Texto da mensagem a ser enviada
            
        Returns:
            True se a mensagem foi enviada com sucesso, False caso contr치rio
        """
        try:
            bot = telegram.Bot(token=self.bot_token)
            bot.send_message(
                chat_id=self.chat_id,
                text=mensagem,
                parse_mode="Markdown"
            )
            
            logger.info("Mensagem enviada com sucesso via Telegram")
            return True
            
        except Exception as e:
            logger.exception("Erro ao enviar mensagem via Telegram")
            return False
    
    def _enviar_alerta_telegram(self, mensagem: str) -> bool:
        """
        Envia um alerta via Telegram
        
        Args:
            mensagem: Texto do alerta a ser enviada
            
        Returns:
            True se o alerta foi enviado com sucesso, False caso contr치rio
        """
        try:
            return self._enviar_mensagem_telegram(mensagem)
        except Exception as e:
            logger.exception("Erro ao enviar alerta via Telegram")
            return False 