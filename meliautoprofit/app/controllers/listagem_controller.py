"""
Controlador de listagem autom√°tica
"""
import logging
from fastapi import APIRouter, Depends, HTTPException, BackgroundTasks
from sqlalchemy.orm import Session
from datetime import datetime
from typing import Dict, Any, List

from ..config import setup_logger
from ..services.listagem import ListagemService
from ...database import get_db
from ..api.telegram import TelegramAPI

# Configura√ß√£o de logger
logger = setup_logger(__name__)

# Roteador FastAPI
router = APIRouter(
    prefix="/listagem",
    tags=["listagem"],
    responses={404: {"description": "Not found"}},
)

@router.post("/automatica")
async def criar_anuncios_automaticos(background_tasks: BackgroundTasks, db: Session = Depends(get_db)):
    """Inicia o processo de cria√ß√£o autom√°tica de an√∫ncios em background"""
    logger.info("Iniciando processo de cria√ß√£o autom√°tica de an√∫ncios")
    
    # Adiciona a tarefa ao processamento em background
    background_tasks.add_task(processar_listagem_automatica, db)
    
    return {"message": "Processo de listagem autom√°tica iniciado em background"}

@router.get("/tendencias")
async def buscar_tendencias(limit: int = 10, db: Session = Depends(get_db)) -> List[Dict[str, Any]]:
    """Busca as tend√™ncias atuais no Mercado Livre"""
    logger.info(f"Buscando top {limit} tend√™ncias")
    
    try:
        service = ListagemService(db)
        tendencias = service.buscar_tendencias(limit=limit)
        
        return tendencias
    
    except Exception as e:
        logger.error(f"Erro ao buscar tend√™ncias: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erro ao buscar tend√™ncias: {str(e)}")

def processar_listagem_automatica(db: Session):
    """Processa a listagem autom√°tica em background"""
    logger.info("Executando processamento de listagem autom√°tica")
    
    try:
        # Inicializa o servi√ßo de listagem
        service = ListagemService(db)
        
        # Inicializa o API do Telegram para notifica√ß√µes
        telegram = TelegramAPI()
        
        # Hora inicial
        hora_inicio = datetime.now()
        
        # Cria an√∫ncios automaticamente
        total_anuncios = service.criar_anuncios_diarios()
        
        # Hora final
        hora_fim = datetime.now()
        duracao = (hora_fim - hora_inicio).total_seconds() / 60  # Dura√ß√£o em minutos
        
        # Envia notifica√ß√£o pelo Telegram
        mensagem = f"""
üü¢ Listagem Autom√°tica Conclu√≠da

üìä Resumo:
- An√∫ncios criados: {total_anuncios}
- Data: {hora_inicio.strftime('%d/%m/%Y')}
- Hor√°rio: {hora_inicio.strftime('%H:%M')}
- Dura√ß√£o: {duracao:.1f} minutos
        """
        
        telegram.send_message(mensagem)
        
        logger.info(f"Processo de listagem autom√°tica conclu√≠do. {total_anuncios} an√∫ncios criados.")
    
    except Exception as e:
        logger.error(f"Erro durante processo de listagem autom√°tica: {str(e)}")
        
        # Tenta enviar notifica√ß√£o de erro
        try:
            telegram = TelegramAPI()
            telegram.send_notification(
                "Erro na Listagem Autom√°tica",
                f"Ocorreu um erro durante o processo de listagem autom√°tica: {str(e)}",
                is_error=True
            )
        except Exception as telegram_error:
            logger.error(f"Erro ao enviar notifica√ß√£o de erro pelo Telegram: {str(telegram_error)}") 