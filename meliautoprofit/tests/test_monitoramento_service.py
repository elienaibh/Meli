"""
Testes para o servi√ßo de monitoramento
"""
import os
import pytest
import json
import tempfile
from datetime import datetime
from unittest.mock import patch, MagicMock

from app.services.monitoramento import MonitoramentoService
from database.models import Produto, Pedido, StatusPedido, StatusProduto

class TestMonitoramentoService:
    """Testes para o servi√ßo de monitoramento"""
    
    @pytest.fixture
    def service(self, test_db):
        """Fixture para criar o servi√ßo de monitoramento com mocks"""
        with patch('app.services.monitoramento.TelegramAPI') as mock_telegram:
            # Configura o mock do Telegram
            telegram_instance = MagicMock()
            mock_telegram.return_value = telegram_instance
            
            # Cria o servi√ßo com o banco de dados de teste
            service = MonitoramentoService(test_db)
            
            # Define atributos mockados
            service.bot_token = "mock-token"
            service.chat_id = "mock-chat-id"
            
            yield service
    
    def test_gerar_relatorio_diario(self, service):
        """Testa a gera√ß√£o de relat√≥rio di√°rio"""
        # Executa o m√©todo
        relatorio = service.gerar_relatorio_diario()
        
        # Verifica se o relat√≥rio foi gerado corretamente
        assert relatorio is not None
        assert "data_geracao" in relatorio
        assert "vendas" in relatorio
        assert "produtos" in relatorio
        assert "pedidos" in relatorio
        assert "financeiro" in relatorio
        
        # Verifica valores espec√≠ficos
        assert relatorio["vendas"]["total"] > 0
        assert relatorio["vendas"]["quantidade"] > 0
        assert relatorio["pedidos"]["novos"] >= 0
        assert relatorio["financeiro"]["lucro_liquido"] > 0
    
    def test_monitorar_pedidos_pendentes(self, service):
        """Testa o monitoramento de pedidos pendentes"""
        # Executa o m√©todo
        resultado = service.monitorar_pedidos_pendentes()
        
        # Verifica se o resultado √© v√°lido
        assert resultado is not None
        assert "data_verificacao" in resultado
        assert "total_pendentes" in resultado
        assert "pendentes_24h" in resultado
        assert "alertas" in resultado
        
        # Verifica se os alertas tem o formato esperado
        for alerta in resultado["alertas"]:
            assert "id" in alerta
            assert "data_criacao" in alerta
            assert "valor" in alerta
    
    def test_salvar_relatorio_json(self, service, tmp_path):
        """Testa o salvamento de relat√≥rio em JSON"""
        # Gera um relat√≥rio para salvar
        relatorio = service.gerar_relatorio_diario()
        
        # Caminho para o arquivo
        json_path = tmp_path / "relatorio_teste.json"
        
        # Executa o m√©todo
        resultado = service.salvar_relatorio_json(relatorio, str(json_path))
        
        # Verifica se o salvamento foi bem sucedido
        assert resultado is True
        assert os.path.exists(json_path)
        
        # Verifica o conte√∫do do arquivo
        with open(json_path, "r", encoding="utf-8") as f:
            conteudo = json.load(f)
            
            # Verifica se o conte√∫do corresponde ao relat√≥rio
            assert conteudo["data_geracao"] == relatorio["data_geracao"]
            assert conteudo["vendas"]["total"] == relatorio["vendas"]["total"]
            assert conteudo["pedidos"]["novos"] == relatorio["pedidos"]["novos"]
    
    def test_salvar_relatorio_json_diretorio_inexistente(self, service, tmp_path):
        """Testa o salvamento de relat√≥rio em diret√≥rio que n√£o existe"""
        # Gera um relat√≥rio para salvar
        relatorio = service.gerar_relatorio_diario()
        
        # Caminho para o arquivo em um subdiret√≥rio que n√£o existe
        diretorio = tmp_path / "subdir" / "relatorios"
        json_path = diretorio / "relatorio_teste.json"
        
        # Executa o m√©todo
        resultado = service.salvar_relatorio_json(relatorio, str(json_path))
        
        # Verifica se o salvamento foi bem sucedido
        assert resultado is True
        assert os.path.exists(json_path)
    
    @patch('app.services.monitoramento.telegram.Bot')
    def test_enviar_relatorio_telegram(self, mock_bot, service):
        """Testa o envio de relat√≥rio via Telegram"""
        # Configura o mock do Bot do Telegram
        bot_instance = MagicMock()
        mock_bot.return_value = bot_instance
        
        # Executa o m√©todo
        resultado = service.enviar_relatorio_telegram()
        
        # Verifica se o envio foi bem sucedido
        assert resultado is True
        
        # Verifica se os m√©todos do Bot foram chamados
        bot_instance.send_message.assert_called_once()
    
    @patch('app.services.monitoramento.telegram.Bot')
    def test_enviar_relatorio_telegram_sem_token(self, mock_bot, service):
        """Testa o envio de relat√≥rio sem token configurado"""
        # Remove as configura√ß√µes
        service.bot_token = None
        service.chat_id = None
        
        # Executa o m√©todo
        resultado = service.enviar_relatorio_telegram()
        
        # Deve retornar False indicando falha
        assert resultado is False
        
        # Verifica que o bot n√£o foi criado
        mock_bot.assert_not_called()
    
    @patch('app.services.monitoramento.telegram.Bot')
    def test_enviar_alerta_telegram(self, mock_bot, service):
        """Testa o envio de alerta via Telegram"""
        # Configura o mock do Bot do Telegram
        bot_instance = MagicMock()
        mock_bot.return_value = bot_instance
        
        # Executa o m√©todo privado
        resultado = service._enviar_alerta_telegram("Alerta de teste")
        
        # Verifica se o envio foi bem sucedido
        assert resultado is True
        
        # Verifica se os m√©todos do Bot foram chamados
        bot_instance.send_message.assert_called_once()
    
    def test_formatar_mensagem_telegram(self, service):
        """Testa a formata√ß√£o de mensagem para o Telegram"""
        # Gera um relat√≥rio para formatar
        relatorio = service.gerar_relatorio_diario()
        
        # Executa o m√©todo privado
        mensagem = service._formatar_mensagem_telegram(relatorio)
        
        # Verifica se a mensagem foi formatada corretamente
        assert mensagem is not None
        assert mensagem.startswith("üìä *RELAT√ìRIO DI√ÅRIO")
        assert "üí∞ VENDAS" in mensagem
        assert "üì¶ PEDIDOS" in mensagem
        assert "üíµ FINANCEIRO" in mensagem 